pipeline {
    agent any

    environment {
        REGISTRY = "docker.io"
        IMAGE_NAME = "mokshitgupta/docapp"
        GITOPS_REPO = "git@github.com:mokshitgupta/docapp-gitops.git"
        DEPLOYMENT_FILE = "k8s/deployment.yaml"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mokshitgupta/docapp-system.git'
            }
        }

        stage('Code Quality - SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }

        stage('Dependency Scan - OWASP') {
            steps {
                sh 'dependency-check.sh --scan . --format ALL --out dependency-check-report'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    IMAGE_TAG = "${BUILD_NUMBER}"
                    sh "docker build -t ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                    sh "docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Update GitOps Repo') {
            steps {
                script {
                    sh '''
                        rm -rf docapp-gitops
                        git clone ${GITOPS_REPO}
                        cd docapp-gitops
                        sed -i "s|image:.*|image: ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}|" ${DEPLOYMENT_FILE}
                        git config user.email "jenkins@ci.com"
                        git config user.name "Jenkins CI"
                        git commit -am "Update image tag to ${BUILD_NUMBER}"
                        git push origin main
                    '''
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/dependency-check-report/*.*', allowEmptyArchive: true
        }
        failure {
            mail to: 'mokshit029@example.com',
                 subject: "Build Failed in Jenkins: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Check Jenkins for details."
        }
    }
}
