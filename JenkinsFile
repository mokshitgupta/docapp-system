pipeline {
    agent any

    environment {
        SONARQUBE = "Sonar"    // Jenkins Sonar tool name
        DOCKERHUB_USER = "mokshitgupta"
        DOCKER_IMAGE = "docappsystem"
    }

    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag for build & push')
    }

    stages {

        stage('Workspace Cleanup') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/mokshitgupta/docapp-system.git'
            }
        }

        stage('Trivy: Filesystem Scan') {
            steps {
                sh '''
                trivy fs --exit-code 0 --severity HIGH,CRITICAL .
                '''
            }
        }

        stage('OWASP: Dependency Check') {
            steps {
                sh '''
                dependency-check.sh --project "docappsystem" --scan .
                '''
            }
        }

        stage('SonarQube: Code Analysis') {
            steps {
                withSonarQubeEnv('Sonar') {
                    sh '''
                    sonar-scanner \
                      -Dsonar.projectKey=docappsystem \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=$SONAR_HOST_URL \
                      -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('SonarQube: Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker: Build Image') {
            steps {
                sh '''
                docker build -t $DOCKERHUB_USER/$DOCKER_IMAGE:$DOCKER_TAG .
                '''
            }
        }

        stage('Docker: Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh '''
                    echo "$PASS" | docker login -u "$USER" --password-stdin
                    docker push $DOCKERHUB_USER/$DOCKER_IMAGE:$DOCKER_TAG
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ Build & Push Completed Successfully"
        }
        failure {
            echo "❌ Build Failed. Check logs."
        }
    }
}
